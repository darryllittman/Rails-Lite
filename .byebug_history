c
self.routes
self
c
match_data.names
match_data
p match_data[:id]
p match_data
match_data = regex.match("/users/42")
regex = Regexp.new '/users/(?<id>\d+)'
match_data.names
match_data
c
req.path
req
c
exit
action_name
controller_class
method
pattern
regex.each
regex
c
s
matches
c
regex.names
regex.name
c
exit
regex.class
regex
x = Regexp.new(pattern)
method
Regexp.new pattern
Rex
Rexep.new pattern
pattern
match_data = regex.match(action_name)
match_data = regex.match(pattern)
match_data = regex.match(method)
regex
c
s
method
action_name
self
http_method
regex
pattern
c
exit
regex.match("/users")
regex.match("/users/")
regex = Regexp.new pattern
pattern
c
match_data = x.match(pattern.to_s)
pattern.to_s
pattern
match_data = x.match(pattern)
x
x = Regexp.new(pattern)
pattern
c
pattern
c
pattern
c
controller_class
method
pattern
c
pattern
match_data = pattern.match(pattern)
match_data = pattern.match
c
proc.call
proc
c
res.status
res.body
res
c
@routes.select { |route| route.matches?(req) }
@routes.first
@routes
req.request_method
req.path
c
@http_method
@action_name
c
@pattern
c
@pattern
req.request_method
req
@pattern
c
@controller_class.new(req, res, {})
@controller_class
@pattern
req
c
req.request_method.downcase.to_sym == @http_method
req.request_method.downcase.to_sym
@http_method
req.request_method
((@pattern =~ req.path) == 0)
exit
c
(@pattern =~ req.path) == 0
@pattern =~ req.path == 0
@pattern =~ req.path
c
exit
req.methods
req
req.request_method
c
req.env["rack.input"] == @pattern
req
c
@pattern == req.env["rack.input"]
@pattern
req
c
req.env
req.method
req
c
req
c
session["count"]
session[
c
erb
exit
@res
c
res.cookies
res
c
@cookie.to_json
@cookie.to_JSON
@cookie
res.cookies
res
c
res.set_cookie("_rails_liet_app", @cookie)
res.cookies
res
c
req.cookies.nil? || req.cookies == {}
c
req.cookies
req.cookies.nil?
c
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies[
req.cookies
req
c
s
req.cookies
Session.new(req)
req
c
res
c
x = res.set_cookie("_rails_lite_app", @cookie)
x = res.set_cookie("_rails_liet_app", @cookie)
@cookie
res
c
res.set_cookie("_rails_lite_app", @cookie)
res.set_cookie
Rack::Response.set_cookie
res
c
res.cookies
res
c
JSON.parse(req.cookies["_rails_lite_app"])
c
JSON.parse(req.cookies["_rails_liet_app"])c
JSON.parse(req.cookies["_rails_liet_app"])
JSON.parse(req.cookies["_rails_liet_app"]
req.cookies["rails_lite_app"]
req.cookies
@cookie
c
@cookie
c
c.values
@cookie
c
n
c
@cookie.values
@cookie
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies["_rails_lite_app"].values)
JSON.parse(req.cookies["_rails_lite_app"].value)
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies["_rails_lite_app"][])
JSON.parse(req.cookies["_rails_lite_app"])
c
@cookie["xyz"]
@cookie
c
@cookie
@cookie["xyz"]
@cookie["_rails_lite_app"]
@cookie["xyz"]
@cookie
c
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies["_rails_lite_app"].first)
JSON.parse(req.cookies["_rails_lite_app"])
JSON.parse(req.cookies["_rails_lite_app"]
c
req.cookies
req.cookie_hash
req
req.cookies["_rails_lite_a
c
req.cookies
req.cookies["_rails_lite_app"]
req.cookies
JSON.parse(req.cookies["_rails_lite_app"])
c
n
exit
session
JSON.parse(req.cookies["_rails_lite_app"])
c
req.cookies["_rails_lite_app"]
req.cookies
JSON.parse(req.cookies)
req.cookies
req.cookie_hash
req
JSON.parse(req)
c
exit
c
ERB.new("<%= path %>").result(binding)
ERB.new("<%= path %>")
ERB.new("<%= path %>"
exit
c
template_name
c
